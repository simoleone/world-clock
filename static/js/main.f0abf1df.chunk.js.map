{"version":3,"sources":["DaylightMap.jsx","App.js","reportWebVitals.js","index.js"],"names":["world","topojson","topology","objects","units","DaylightMap","useState","Date","now","setNow","useEffect","interval","setInterval","clearInterval","sun","day","setUTCHours","t","solar","sunPosition","night","geoCircle","radius","center","antipode","height","Math","floor","window","innerHeight","width","innerWidth","data","features","fitSize","mercator","Graticule","graticule","g","path","stroke","map","i","feature","d","strokeWidth","fill","LOCATIONS","tz","city","country","Clock","styled","_Clock","ClockWrapper","div","TimeZoneText","span","CurrentTimeText","CountryFlag","ReactCountryFlag","ZonedClock","nowZoned","clone","format","value","size","renderSecondHand","svg","countryCode","FullScreenNotice","App","moment","useEventListener","e","code","metaKey","preventDefault","document","fullscreenElement","exitFullscreen","documentElement","requestFullscreen","navigationUI","Container","fluid","Row","style","marginTop","location","Col","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f0abf1df.chunk.js","sourcesContent":["import { Graticule } from \"@visx/geo\";\nimport NaturalEarth from \"@visx/geo/lib/projections/NaturalEarth\";\nimport { geoCircle } from \"d3-geo\";\nimport React, { useEffect, useState } from \"react\";\nimport * as solar from \"solar-calculator\";\nimport * as topojson from \"topojson-client\";\nimport topology from \"./world-topo.json\";\n\nconst world = topojson.feature(topology, topology.objects.units);\n\nexport const background = \"#fff\";\n\nconst sunPosition = (now) => {\n  const day = new Date(+now).setUTCHours(0, 0, 0, 0);\n  const t = solar.century(now);\n  const longitude = ((day - now) / 864e5) * 360 - 180;\n  return [longitude - solar.equationOfTime(t) / 4, solar.declination(t)];\n};\n\nconst antipode = ([longitude, latitude]) => [longitude + 180, -latitude];\n\nconst UPDATE_INTERVAL_MS = 60000;\n\nexport function DaylightMap() {\n  const [now, setNow] = useState(new Date());\n\n  useEffect(() => {\n    const interval = setInterval(() => setNow(new Date()), UPDATE_INTERVAL_MS);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  const sun = sunPosition(now);\n  const night = geoCircle().radius(90).center(antipode(sun))();\n\n  const height = Math.floor(window.innerHeight / 1.5);\n  const width = window.innerWidth;\n\n  return (\n    <svg width={width} height={height}>\n      <NaturalEarth data={world.features} fitSize={[[width, height], world]}>\n        {(mercator) => (\n          <g>\n            <Graticule\n              graticule={(g) => mercator.path(g) || \"\"}\n              stroke=\"rgba(255,255,255,0.1)\"\n            />\n            {mercator.features.map(({ feature, path }, i) => (\n              <path\n                key={`map-feature-${i}`}\n                d={path || \"\"}\n                stroke={background}\n                strokeWidth={0.5}\n              />\n            ))}\n            <path fill=\"rgba(255,0,0,0.2)\" d={mercator.path(night)} />\n          </g>\n        )}\n      </NaturalEarth>\n    </svg>\n  );\n}\n","import useEventListener from \"@use-it/event-listener\";\nimport moment from \"moment-timezone/builds/moment-timezone-with-data\";\nimport React, { useEffect, useState } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport _Clock from \"react-clock\";\nimport \"react-clock/dist/Clock.css\";\nimport ReactCountryFlag from \"react-country-flag\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { DaylightMap } from \"./DaylightMap\";\n\nconst LOCATIONS = [\n  {\n    tz: \"America/Los_Angeles\",\n    city: \"San Francisco\",\n    country: \"US\",\n  },\n  {\n    tz: \"America/Chicago\",\n    city: \"Chicago\",\n    country: \"US\",\n  },\n  {\n    tz: \"America/New_York\",\n    city: \"New York\",\n    country: \"US\",\n  },\n  {\n    tz: \"UTC\",\n    city: \"UTC\",\n    country: \"GB\",\n  },\n  {\n    tz: \"Europe/Helsinki\",\n    city: \"Helsinki\",\n    country: \"FI\",\n  },\n];\n\nconst Clock = styled(_Clock)`\n  & .react-clock__face {\n    border-color: white;\n  }\n  & .react-clock__hand__body {\n    background-color: white;\n  }\n  & .react-clock__mark__body {\n    background-color: white;\n  }\n`;\n\nconst ClockWrapper = styled.div`\n  text-align: center;\n  position: relative;\n`;\n\nconst TimeZoneText = styled.span`\n  color: white;\n`;\n\nconst CurrentTimeText = styled.span`\n  color: white;\n  font-size: 1.25em;\n  position: absolute;\n  top: 140px;\n\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst CountryFlag = styled(ReactCountryFlag)`\n  &[style] {\n    height: 1em !important;\n    width: ${(4 / 3) * 1}em !important;\n  }\n`;\n\nconst ZonedClock = ({ now, tz, city, country }) => {\n  let nowZoned = now.clone().tz(tz);\n\n  return (\n    <ClockWrapper>\n      <CurrentTimeText>{nowZoned.format(\"HH:mm\")}</CurrentTimeText>\n      {/*<TimeZoneText>{nowZoned.format(\"z\")}</TimeZoneText>*/}\n      <Clock\n        value={nowZoned.format(\"HH:mm:ss\")}\n        size={200}\n        renderSecondHand={false}\n      />\n      <TimeZoneText>{city}</TimeZoneText>\n      &nbsp;\n      <CountryFlag svg countryCode={country} />\n    </ClockWrapper>\n  );\n};\n\nZonedClock.propTypes = {\n  now: PropTypes.instanceOf(moment).isRequired,\n  tz: PropTypes.string.isRequired,\n};\n\nconst FullScreenNotice = styled.span`\n  position: fixed;\n  top: 5px;\n  left: 5px;\n  color: white;\n  font-size: 0.5em;\n\n  html:fullscreen & {\n    display: none;\n  }\n`;\n\nfunction App() {\n  const [now, setNow] = useState(moment());\n\n  useEffect(() => {\n    const interval = setInterval(() => setNow(moment()), 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  useEventListener(\"keydown\", (e) => {\n    if (e.code === \"Enter\" && e.metaKey) {\n      e.preventDefault();\n      if (!document.fullscreenElement) {\n        document.documentElement.requestFullscreen({ navigationUI: \"hide\" });\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        }\n      }\n    }\n  });\n\n  return (\n    <div>\n      <FullScreenNotice>Go full screen! (Command + Enter)</FullScreenNotice>\n      <Container fluid>\n        <Row>\n          <DaylightMap />\n        </Row>\n\n        <Row style={{ marginTop: \"2em\" }}>\n          {LOCATIONS.map((location) => (\n            <Col className=\"d-flex justify-content-center\" key={location.tz}>\n              <ZonedClock now={now} {...location} />\n            </Col>\n          ))}\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}